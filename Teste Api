using UnityEngine;
using System.Threading.Tasks;
using System.Collections.Generic;
using UnityEngine.UI;

public class TesteAPI : MonoBehaviour
{
    public static TesteAPI Instance;

    private GameApiService apiService;

    [Header("UI References")]
    public GameObject pauseMenu;
    public Text vidaText;
    public Text itensText;
    public Text posicaoText;
    public Text saveMessageText;

    private Jogador currentPlayer;
    private string playerId = "1"; // ID fixo para a atividade

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
    }

    async void Start()
    {
        apiService = new GameApiService();

        if (saveMessageText != null) saveMessageText.gameObject.SetActive(false);
        if (pauseMenu != null) pauseMenu.SetActive(false);

        Debug.Log("=== SISTEMA DE SAVE/LOAD INICIADO ===");

        // Em vez de criar jogadores de teste, carrega o jogador principal
        await LoadPlayerData();
    }

    void Update()
    {
        // Sistema de pausa com ESC
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            TogglePauseMenu();
        }

        // Teste manual da API com tecla T
        if (Input.GetKeyDown(KeyCode.T))
        {
            TestarAPIManual();
        }
    }

    // ========== SISTEMA DE SAVE/LOAD AUTOM√ÅTICO ==========

    public void UpdatePlayerData(int vida, int quantidadeItens, Vector3 position)
    {
        if (currentPlayer != null)
        {
            currentPlayer.Vida = vida.ToString();
            currentPlayer.PosicaoX = (int)position.x;
            currentPlayer.PosicaoY = (int)position.y;
            currentPlayer.PosicaoZ = (int)position.z;
        }
    }

    public async void SavePlayerData()
    {
        if (currentPlayer != null)
        {
            await apiService.AtualizarJogador(currentPlayer.id, currentPlayer);
            Debug.Log("üíæ Salvamento autom√°tico realizado!");
        }
    }

    public void ShowSaveMessage()
    {
        StartCoroutine(ShowSaveMessageCoroutine());
    }

    private System.Collections.IEnumerator ShowSaveMessageCoroutine()
    {
        if (saveMessageText != null)
        {
            saveMessageText.gameObject.SetActive(true);
            yield return new WaitForSeconds(2f);
            saveMessageText.gameObject.SetActive(false);
        }
    }

    private async Task LoadPlayerData()
    {
        try
        {
            Debug.Log("üîÑ Tentando carregar jogador...");

            // Tenta buscar o jogador com ID 1
            currentPlayer = await apiService.GetJogador(playerId);

            if (currentPlayer == null)
            {
                Debug.Log("üéÆ Jogador n√£o encontrado, criando novo...");

                // Cria novo jogador se n√£o existir
                currentPlayer = new Jogador
                {
                    Nome = "PlayerPrincipal",
                    Login = "player1",
                    Senha = "123",
                    Fase = "1",
                    Vida = "100",
                    PosicaoX = 0,
                    PosicaoY = 0,
                    PosicaoZ = 0
                };

                currentPlayer = await apiService.CriarJogador(currentPlayer);

                if (currentPlayer == null)
                {
                    Debug.LogError("‚ùå Falha ao criar jogador na API. Usando dados locais.");
                    // Fallback: usa dados locais sem API
                    currentPlayer = new Jogador
                    {
                        id = "1",
                        Nome = "PlayerLocal",
                        Vida = "100",
                        PosicaoX = 0,
                        PosicaoY = 0,
                        PosicaoZ = 0
                    };
                }
                else
                {
                    playerId = currentPlayer.id;
                    Debug.Log($"‚úÖ Novo jogador criado com ID: {currentPlayer.id}");
                }
            }
            else
            {
                Debug.Log($"‚úÖ Jogador carregado: {currentPlayer.Nome} (Vida: {currentPlayer.Vida})");
            }

        }
        catch (System.Exception ex)
        {
            Debug.LogError($"‚ùå Erro ao carregar dados: {ex.Message}");

            // Fallback em caso de erro
            currentPlayer = new Jogador
            {
                id = "1",
                Nome = "PlayerOffline",
                Vida = "100",
                PosicaoX = 0,
                PosicaoY = 0,
                PosicaoZ = 0
            };
        }
    }

 
    // ========== SISTEMA DE MENU DE PAUSA ==========

    public void TogglePauseMenu()
    {
        if (pauseMenu == null) return;

        bool isPaused = !pauseMenu.activeSelf;
        pauseMenu.SetActive(isPaused);
        Time.timeScale = isPaused ? 0f : 1f;

        if (isPaused)
        {
            UpdatePauseMenuUI();
        }
    }

    private void UpdatePauseMenuUI()
    {
        if (currentPlayer != null)
        {
            if (vidaText != null) vidaText.text = "Vida: " + currentPlayer.Vida;
            if (posicaoText != null) posicaoText.text = $"Posi√ß√£o: ({currentPlayer.PosicaoX}, {currentPlayer.PosicaoY}, {currentPlayer.PosicaoZ})";

            StartCoroutine(LoadAndDisplayItens());
        }
    }

    private async Task<int> GetQuantidadeItens()
    {
        if (currentPlayer != null)
        {
            ItemJogador[] itens = await apiService.GetItensJogador(currentPlayer.id);
            return itens.Length;
        }
        return 0;
    }

    private System.Collections.IEnumerator LoadAndDisplayItens()
    {
        var task = GetQuantidadeItens();

        while (!task.IsCompleted)
            yield return null;

        if (itensText != null)
            itensText.text = "Quantidade de Itens: " + task.Result;
    }

    public void RecarregarJogo()
    {
        StartCoroutine(ReloadGameCoroutine());
    }

    private System.Collections.IEnumerator ReloadGameCoroutine()
    {
        var task = LoadPlayerData();

        while (!task.IsCompleted)
            yield return null;

        TogglePauseMenu();
    }

    // ========== TESTES MANUAIS DA API (OPCIONAL) ==========

    private async void TestarAPIManual()
    {
        Debug.Log("=== TESTES MANUAIS DA API ===");

        // Teste: criar jogador adicional
        Jogador testeJogador = new Jogador();
        testeJogador.Nome = "TesteManual";
        testeJogador.Login = "teste";
        testeJogador.Senha = "123";
        testeJogador.Fase = "1";
        testeJogador.Vida = "100";
        testeJogador.PosicaoX = 5;
        testeJogador.PosicaoY = 0;
        testeJogador.PosicaoZ = 5;

        Jogador criado = await apiService.CriarJogador(testeJogador);
        Debug.Log($"üéØ Jogador de teste criado: {criado.Nome} (ID: {criado.id})");

        // Mostrar todos os jogadores
        await MostrarTodosJogadores();
    }

    async Task MostrarTodosJogadores()
    {
        Jogador[] jogadores = await apiService.GetTodosJogadores();
        Debug.Log($"üìä Total de jogadores na API: {jogadores.Length}");
        foreach (var jogador in jogadores)
        {
            Debug.Log($"üéÆ Jogador: {jogador.Nome} (ID: {jogador.id}, Vida: {jogador.Vida})");
        }
    }

    void OnDestroy()
    {
        apiService?.Dispose();
    }
}
